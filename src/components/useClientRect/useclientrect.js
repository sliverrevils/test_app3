//https://ru.reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node


import { useCallback, useState ,useEffect, useRef} from 'react';

import './useclientrect.css';

const ClientRect=()=>{
    const [state,setState]=useState();
    const update=useRef(0);
    const [rect,ref] = useClientRect();


    useEffect(()=>{        
        console.log('üí±');
    },
    [state]);

    return(
        <div>
            <h4>-(callback-ref —ç–ª–µ–º–µ–Ω—Ç–∞ <mark>–∑–∞–≥–æ–ª–æ–≤–∫–∞ </mark>–æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ useCallback , –≥–¥–µ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ä–æ–≤. —Ç–æ–ª—å–∫–æ –ø—Ä–∏ componentDidMount )</h4>
            <h1 ref={ref}> <mark> –ó–∞–≥–æ–ª–æ–≤–æ–∫ </mark></h1>
            {rect!==null&&
            <h2> –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–º–µ–µ—Ç –≤—ã—Å–æ—Ç—É {Math.round(rect.height)} –ø–∏–∫—Å–µ–ª–µ–π</h2>}
            <button onClick={()=>{setState(!state);++update.current}}>update {update.current}</button>
        </div>
    )
}

function useClientRect(){
    const [rect,setRect]=useState(null);

    const ref=useCallback(node=>{
        if(node!==null){            
            console.log('GETTING RECT');
            setRect(node.getBoundingClientRect());
        }
    },[]);
    return [rect,ref];

}

export default ClientRect;